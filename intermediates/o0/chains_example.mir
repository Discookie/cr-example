// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn chain_function_1(_1: isize) -> isize {
    debug _param => _1;                  // in scope 0 at chains-example\src\main.rs:14:21: 14:27
    let mut _0: isize;                   // return place in scope 0 at chains-example\src\main.rs:14:39: 14:44
    let _2: &str;                        // in scope 0 at D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:13: 20:26
    let mut _3: isize;                   // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _4: isize;                   // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _5: isize;                   // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _6: isize;                   // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _7: isize;                   // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _8: isize;                   // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _9: isize;                   // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _10: isize;                  // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _11: isize;                  // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _12: isize;                  // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _13: isize;                  // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _14: isize;                  // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _15: isize;                  // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _16: isize;                  // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _17: isize;                  // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _18: isize;                  // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _19: isize;                  // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    let mut _20: isize;                  // in scope 0 at chains-example\src\main.rs:14:1: 18:2
    scope 1 {
        debug _metadata_str => _2;       // in scope 1 at D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:13: 20:26
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:13: 20:26
        _2 = const "ChainsOfRecurrences { 1, +, 2, +, 3 }"; // scope 0 at D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:29: 20:96
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 115, 79, 102, 82, 101, 99, 117, 114, 114, 101, 110, 99, 101, 115, 32, 123, 32, 49, 44, 32, 43, 44, 32, 50, 44, 32, 43, 44, 32, 51, 32, 125], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [137438953471], len: Size { raw: 37 } }, size: Size { raw: 37 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 37 })
                                         // mir::Constant
                                         // + span: D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:29: 20:96
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 115, 79, 102, 82, 101, 99, 117, 114, 114, 101, 110, 99, 101, 115, 32, 123, 32, 49, 44, 32, 43, 44, 32, 50, 44, 32, 43, 44, 32, 51, 32, 125], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [137438953471], len: Size { raw: 37 } }, size: Size { raw: 37 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 37 }) }
        StorageDead(_2);                 // scope 0 at chains-example\src\main.rs:18:1: 18:2
        StorageLive(_5);                 // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageLive(_3);                 // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageLive(_4);                 // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _3 = _1;                         // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _4 = const 1_isize;              // scope 0 at chains-example\src\main.rs:14:1: 18:2
                                         // ty::Const
                                         // + ty: isize
                                         // + val: Value(Scalar(0x0000000000000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:14:1: 18:2
                                         // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }
        _5 = const 1_isize;              // scope 0 at chains-example\src\main.rs:14:1: 18:2
                                         // ty::Const
                                         // + ty: isize
                                         // + val: Value(Scalar(0x0000000000000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:14:1: 18:2
                                         // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }
        StorageLive(_6);                 // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageLive(_7);                 // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _6 = _3;                         // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _7 = Mul(_4, move _6);           // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageDead(_6);                 // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageLive(_8);                 // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _8 = const 2_isize;              // scope 0 at chains-example\src\main.rs:14:1: 18:2
                                         // ty::Const
                                         // + ty: isize
                                         // + val: Value(Scalar(0x0000000000000002))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:14:1: 18:2
                                         // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000002)) }
        StorageLive(_9);                 // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageLive(_10);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _9 = _7;                         // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _10 = Mul(_8, move _9);          // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageDead(_9);                 // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageLive(_11);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageLive(_12);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _11 = _10;                       // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _12 = Add(_5, move _11);         // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageDead(_11);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageLive(_13);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _13 = Sub(move _3, const 1_isize); // scope 0 at chains-example\src\main.rs:14:1: 18:2
                                         // ty::Const
                                         // + ty: isize
                                         // + val: Value(Scalar(0x0000000000000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:14:1: 18:2
                                         // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }
        StorageDead(_10);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageDead(_8);                 // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageDead(_4);                 // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageDead(_3);                 // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageDead(_5);                 // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageLive(_14);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageLive(_15);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _14 = _13;                       // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _15 = Mul(_7, move _14);         // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageDead(_14);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageLive(_16);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _16 = Div(move _15, const 2_isize); // scope 0 at chains-example\src\main.rs:14:1: 18:2
                                         // ty::Const
                                         // + ty: isize
                                         // + val: Value(Scalar(0x0000000000000002))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:14:1: 18:2
                                         // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000002)) }
        StorageDead(_15);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageLive(_17);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _17 = const 3_isize;             // scope 0 at chains-example\src\main.rs:14:1: 18:2
                                         // ty::Const
                                         // + ty: isize
                                         // + val: Value(Scalar(0x0000000000000003))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:14:1: 18:2
                                         // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000003)) }
        StorageLive(_18);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageLive(_19);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _18 = _16;                       // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _19 = Mul(_17, move _18);        // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageDead(_18);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageLive(_20);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _20 = _19;                       // scope 0 at chains-example\src\main.rs:14:1: 18:2
        _0 = Add(_12, move _20);         // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageDead(_20);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageDead(_19);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageDead(_17);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageDead(_7);                 // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageDead(_13);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageDead(_12);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        StorageDead(_16);                // scope 0 at chains-example\src\main.rs:14:1: 18:2
        return;                          // scope 0 at chains-example\src\main.rs:14:1: 18:2
    }
}

fn <impl at chains-example\src\main.rs:32:1: 47:2>::chain_function_3(_1: &Chain3, _2: usize) -> usize {
    debug self => _1;                    // in scope 0 at chains-example\src\main.rs:36:29: 36:34
    debug _param => _2;                  // in scope 0 at chains-example\src\main.rs:36:36: 36:42
    let mut _0: usize;                   // return place in scope 0 at chains-example\src\main.rs:36:54: 36:59
    let _3: &str;                        // in scope 0 at D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:13: 20:26
    let mut _4: usize;                   // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _5: usize;                   // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _6: usize;                   // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _7: usize;                   // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _8: usize;                   // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _9: usize;                   // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _10: usize;                  // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _11: usize;                  // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _12: usize;                  // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _13: usize;                  // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _14: usize;                  // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _15: usize;                  // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _16: usize;                  // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _17: usize;                  // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _18: usize;                  // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _19: usize;                  // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _20: usize;                  // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    let mut _21: usize;                  // in scope 0 at chains-example\src\main.rs:36:5: 39:6
    scope 1 {
        debug _metadata_str => _3;       // in scope 1 at D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:13: 20:26
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:13: 20:26
        _3 = const "ChainsOfRecurrences { 1, +, 2, +, 3 }"; // scope 0 at D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:29: 20:96
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 115, 79, 102, 82, 101, 99, 117, 114, 114, 101, 110, 99, 101, 115, 32, 123, 32, 49, 44, 32, 43, 44, 32, 50, 44, 32, 43, 44, 32, 51, 32, 125], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [137438953471], len: Size { raw: 37 } }, size: Size { raw: 37 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 37 })
                                         // mir::Constant
                                         // + span: D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:29: 20:96
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 115, 79, 102, 82, 101, 99, 117, 114, 114, 101, 110, 99, 101, 115, 32, 123, 32, 49, 44, 32, 43, 44, 32, 50, 44, 32, 43, 44, 32, 51, 32, 125], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [137438953471], len: Size { raw: 37 } }, size: Size { raw: 37 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 37 }) }
        StorageDead(_3);                 // scope 0 at chains-example\src\main.rs:39:5: 39:6
        StorageLive(_6);                 // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageLive(_4);                 // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageLive(_5);                 // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _4 = _2;                         // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _5 = const 1_usize;              // scope 0 at chains-example\src\main.rs:36:5: 39:6
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:36:5: 39:6
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }
        _6 = const 1_usize;              // scope 0 at chains-example\src\main.rs:36:5: 39:6
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:36:5: 39:6
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }
        StorageLive(_7);                 // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageLive(_8);                 // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _7 = _4;                         // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _8 = Mul(_5, move _7);           // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageDead(_7);                 // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageLive(_9);                 // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _9 = const 2_usize;              // scope 0 at chains-example\src\main.rs:36:5: 39:6
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000002))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:36:5: 39:6
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }
        StorageLive(_10);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageLive(_11);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _10 = _8;                        // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _11 = Mul(_9, move _10);         // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageDead(_10);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageLive(_12);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageLive(_13);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _12 = _11;                       // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _13 = Add(_6, move _12);         // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageDead(_12);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageLive(_14);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _14 = Sub(move _4, const 1_usize); // scope 0 at chains-example\src\main.rs:36:5: 39:6
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:36:5: 39:6
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }
        StorageDead(_11);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageDead(_9);                 // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageDead(_5);                 // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageDead(_4);                 // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageDead(_6);                 // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageLive(_15);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageLive(_16);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _15 = _14;                       // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _16 = Mul(_8, move _15);         // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageDead(_15);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageLive(_17);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _17 = Div(move _16, const 2_usize); // scope 0 at chains-example\src\main.rs:36:5: 39:6
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000002))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:36:5: 39:6
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }
        StorageDead(_16);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageLive(_18);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _18 = const 3_usize;             // scope 0 at chains-example\src\main.rs:36:5: 39:6
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000003))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:36:5: 39:6
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }
        StorageLive(_19);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageLive(_20);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _19 = _17;                       // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _20 = Mul(_18, move _19);        // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageDead(_19);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageLive(_21);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _21 = _20;                       // scope 0 at chains-example\src\main.rs:36:5: 39:6
        _0 = Add(_13, move _21);         // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageDead(_21);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageDead(_20);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageDead(_18);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageDead(_8);                 // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageDead(_14);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageDead(_13);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        StorageDead(_17);                // scope 0 at chains-example\src\main.rs:36:5: 39:6
        return;                          // scope 0 at chains-example\src\main.rs:36:5: 39:6
    }
}

fn chain_function_0(_1: u32) -> u32 {
    debug _param => _1;                  // in scope 0 at chains-example\src\main.rs:7:21: 7:27
    let mut _0: u32;                     // return place in scope 0 at chains-example\src\main.rs:7:37: 7:40
    let _2: &str;                        // in scope 0 at chains-example\src\main.rs:8:9: 8:22
    let mut _3: u32;                     // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _4: u32;                     // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _5: u32;                     // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _6: u32;                     // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _7: u32;                     // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _8: u32;                     // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _9: u32;                     // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _10: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _11: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _12: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _13: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _14: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _15: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _16: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _17: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _18: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _19: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _20: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _21: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _22: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _23: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _24: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _25: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _26: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _27: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _28: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    let mut _29: u32;                    // in scope 0 at chains-example\src\main.rs:7:1: 10:2
    scope 1 {
        debug _metadata_str => _2;       // in scope 1 at chains-example\src\main.rs:8:9: 8:22
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at chains-example\src\main.rs:8:9: 8:22
        _2 = const "ChainsOfRecurrences {0, +, 1, +, 3, +, 2}"; // scope 0 at chains-example\src\main.rs:8:25: 8:68
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 115, 79, 102, 82, 101, 99, 117, 114, 114, 101, 110, 99, 101, 115, 32, 123, 48, 44, 32, 43, 44, 32, 49, 44, 32, 43, 44, 32, 51, 44, 32, 43, 44, 32, 50, 125], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2199023255551], len: Size { raw: 41 } }, size: Size { raw: 41 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 41 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:8:25: 8:68
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 115, 79, 102, 82, 101, 99, 117, 114, 114, 101, 110, 99, 101, 115, 32, 123, 48, 44, 32, 43, 44, 32, 49, 44, 32, 43, 44, 32, 51, 44, 32, 43, 44, 32, 50, 125], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [2199023255551], len: Size { raw: 41 } }, size: Size { raw: 41 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 41 }) }
        StorageDead(_2);                 // scope 0 at chains-example\src\main.rs:10:1: 10:2
        StorageLive(_5);                 // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_3);                 // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_4);                 // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _3 = _1;                         // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _4 = const 1_u32;                // scope 0 at chains-example\src\main.rs:7:1: 10:2
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x00000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:7:1: 10:2
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }
        _5 = const 0_u32;                // scope 0 at chains-example\src\main.rs:7:1: 10:2
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x00000000))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:7:1: 10:2
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }
        StorageLive(_6);                 // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_7);                 // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _6 = _3;                         // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _7 = Mul(_4, move _6);           // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_6);                 // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_8);                 // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _8 = const 1_u32;                // scope 0 at chains-example\src\main.rs:7:1: 10:2
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x00000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:7:1: 10:2
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }
        StorageLive(_9);                 // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_10);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _9 = _7;                         // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _10 = Mul(_8, move _9);          // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_9);                 // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_11);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_12);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _11 = _10;                       // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _12 = Add(_5, move _11);         // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_11);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_13);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _13 = Sub(move _3, const 1_u32); // scope 0 at chains-example\src\main.rs:7:1: 10:2
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x00000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:7:1: 10:2
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }
        StorageDead(_10);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_8);                 // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_4);                 // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_3);                 // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_5);                 // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_14);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_15);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _14 = _13;                       // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _15 = Mul(_7, move _14);         // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_14);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_16);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _16 = Div(move _15, const 2_u32); // scope 0 at chains-example\src\main.rs:7:1: 10:2
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x00000002))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:7:1: 10:2
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }
        StorageDead(_15);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_17);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _17 = const 3_u32;               // scope 0 at chains-example\src\main.rs:7:1: 10:2
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x00000003))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:7:1: 10:2
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }
        StorageLive(_18);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_19);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _18 = _16;                       // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _19 = Mul(_17, move _18);        // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_18);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_20);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_21);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _20 = _19;                       // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _21 = Add(_12, move _20);        // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_20);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_22);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _22 = Sub(move _13, const 1_u32); // scope 0 at chains-example\src\main.rs:7:1: 10:2
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x00000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:7:1: 10:2
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }
        StorageDead(_19);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_17);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_7);                 // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_13);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_12);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_23);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_24);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _23 = _22;                       // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _24 = Mul(_16, move _23);        // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_23);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_25);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _25 = Div(move _24, const 3_u32); // scope 0 at chains-example\src\main.rs:7:1: 10:2
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x00000003))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:7:1: 10:2
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }
        StorageDead(_24);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_26);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _26 = const 2_u32;               // scope 0 at chains-example\src\main.rs:7:1: 10:2
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x00000002))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:7:1: 10:2
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }
        StorageLive(_27);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_28);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _27 = _25;                       // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _28 = Mul(_26, move _27);        // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_27);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageLive(_29);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _29 = _28;                       // scope 0 at chains-example\src\main.rs:7:1: 10:2
        _0 = Add(_21, move _29);         // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_29);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_28);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_26);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_16);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_22);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_21);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        StorageDead(_25);                // scope 0 at chains-example\src\main.rs:7:1: 10:2
        return;                          // scope 0 at chains-example\src\main.rs:7:1: 10:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at chains-example\src\main.rs:49:11: 49:11
    let _1: ();                          // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
    let mut _2: std::fmt::Arguments;     // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _3: &[&str];                 // in scope 0 at chains-example\src\main.rs:50:14: 50:44
    let mut _4: &[&str; 1];              // in scope 0 at chains-example\src\main.rs:50:14: 50:44
    let _5: &[&str; 1];                  // in scope 0 at chains-example\src\main.rs:50:14: 50:44
    let mut _6: &[std::fmt::ArgumentV1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _7: &[std::fmt::ArgumentV1; 0]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _8: &[std::fmt::ArgumentV1; 0];  // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _9: std::ops::Range<u32>;    // in scope 0 at chains-example\src\main.rs:52:14: 52:19
    let mut _10: std::ops::Range<u32>;   // in scope 0 at chains-example\src\main.rs:52:14: 52:19
    let mut _11: std::ops::Range<u32>;   // in scope 0 at chains-example\src\main.rs:52:14: 52:19
    let mut _13: std::option::Option<u32>; // in scope 0 at chains-example\src\main.rs:52:14: 52:19
    let mut _14: &mut std::ops::Range<u32>; // in scope 0 at chains-example\src\main.rs:52:14: 52:19
    let mut _15: &mut std::ops::Range<u32>; // in scope 0 at chains-example\src\main.rs:52:14: 52:19
    let mut _16: isize;                  // in scope 0 at chains-example\src\main.rs:52:9: 52:10
    let mut _18: u32;                    // in scope 0 at chains-example\src\main.rs:52:9: 52:10
    let _20: ();                         // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
    let mut _21: std::fmt::Arguments;    // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _22: &[&str];                // in scope 0 at chains-example\src\main.rs:53:18: 53:38
    let mut _23: &[&str; 3];             // in scope 0 at chains-example\src\main.rs:53:18: 53:38
    let _24: &[&str; 3];                 // in scope 0 at chains-example\src\main.rs:53:18: 53:38
    let mut _25: &[std::fmt::ArgumentV1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _26: &[std::fmt::ArgumentV1; 2]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _27: &[std::fmt::ArgumentV1; 2]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _28: [std::fmt::ArgumentV1; 2];  // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _29: (&u32, &u32);           // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _30: &u32;                   // in scope 0 at chains-example\src\main.rs:53:40: 53:41
    let mut _31: &u32;                   // in scope 0 at chains-example\src\main.rs:53:43: 53:62
    let _32: u32;                        // in scope 0 at chains-example\src\main.rs:53:43: 53:62
    let mut _33: u32;                    // in scope 0 at chains-example\src\main.rs:53:60: 53:61
    let mut _36: std::fmt::ArgumentV1;   // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _37: &u32;                   // in scope 0 at chains-example\src\main.rs:53:40: 53:41
    let mut _38: for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at chains-example\src\main.rs:53:40: 53:41
    let mut _39: std::fmt::ArgumentV1;   // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _40: &u32;                   // in scope 0 at chains-example\src\main.rs:53:43: 53:62
    let mut _41: for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at chains-example\src\main.rs:53:43: 53:62
    let _42: ();                         // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
    let mut _43: std::fmt::Arguments;    // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _44: &[&str];                // in scope 0 at chains-example\src\main.rs:56:14: 56:19
    let mut _45: &[&str; 1];             // in scope 0 at chains-example\src\main.rs:56:14: 56:19
    let _46: &[&str; 1];                 // in scope 0 at chains-example\src\main.rs:56:14: 56:19
    let mut _47: &[std::fmt::ArgumentV1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _48: &[std::fmt::ArgumentV1; 0]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _49: &[std::fmt::ArgumentV1; 0]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _50: ();                         // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
    let mut _51: std::fmt::Arguments;    // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _52: &[&str];                // in scope 0 at chains-example\src\main.rs:57:14: 57:27
    let mut _53: &[&str; 2];             // in scope 0 at chains-example\src\main.rs:57:14: 57:27
    let _54: &[&str; 2];                 // in scope 0 at chains-example\src\main.rs:57:14: 57:27
    let mut _55: &[std::fmt::ArgumentV1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _56: &[std::fmt::ArgumentV1; 1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _57: &[std::fmt::ArgumentV1; 1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _58: [std::fmt::ArgumentV1; 1];  // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _59: (&isize,);              // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _60: &isize;                 // in scope 0 at chains-example\src\main.rs:57:29: 57:48
    let _61: isize;                      // in scope 0 at chains-example\src\main.rs:57:29: 57:48
    let _62: &isize;                     // in scope 0 at chains-example\src\main.rs:57:29: 57:48
    let mut _63: std::fmt::ArgumentV1;   // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _64: &isize;                 // in scope 0 at chains-example\src\main.rs:57:29: 57:48
    let mut _65: for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at chains-example\src\main.rs:57:29: 57:48
    let _66: ();                         // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
    let mut _67: std::fmt::Arguments;    // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _68: &[&str];                // in scope 0 at chains-example\src\main.rs:58:14: 58:27
    let mut _69: &[&str; 2];             // in scope 0 at chains-example\src\main.rs:58:14: 58:27
    let _70: &[&str; 2];                 // in scope 0 at chains-example\src\main.rs:58:14: 58:27
    let mut _71: &[std::fmt::ArgumentV1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _72: &[std::fmt::ArgumentV1; 1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _73: &[std::fmt::ArgumentV1; 1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _74: [std::fmt::ArgumentV1; 1];  // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _75: (&usize,);              // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _76: &usize;                 // in scope 0 at chains-example\src\main.rs:58:29: 58:57
    let _77: usize;                      // in scope 0 at chains-example\src\main.rs:58:29: 58:57
    let mut _78: std::option::Option<()>; // in scope 0 at chains-example\src\main.rs:58:49: 58:53
    let _79: &usize;                     // in scope 0 at chains-example\src\main.rs:58:29: 58:57
    let mut _80: std::fmt::ArgumentV1;   // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _81: &usize;                 // in scope 0 at chains-example\src\main.rs:58:29: 58:57
    let mut _82: for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at chains-example\src\main.rs:58:29: 58:57
    let mut _83: Chain3;                 // in scope 0 at chains-example\src\main.rs:60:9: 60:14
    let _84: ();                         // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
    let mut _85: std::fmt::Arguments;    // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _86: &[&str];                // in scope 0 at chains-example\src\main.rs:61:14: 61:27
    let mut _87: &[&str; 2];             // in scope 0 at chains-example\src\main.rs:61:14: 61:27
    let _88: &[&str; 2];                 // in scope 0 at chains-example\src\main.rs:61:14: 61:27
    let mut _89: &[std::fmt::ArgumentV1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _90: &[std::fmt::ArgumentV1; 1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _91: &[std::fmt::ArgumentV1; 1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _92: [std::fmt::ArgumentV1; 1];  // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _93: (&usize,);              // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _94: &usize;                 // in scope 0 at chains-example\src\main.rs:61:29: 61:50
    let _95: usize;                      // in scope 0 at chains-example\src\main.rs:61:29: 61:50
    let mut _96: &Chain3;                // in scope 0 at chains-example\src\main.rs:61:29: 61:30
    let mut _98: std::fmt::ArgumentV1;   // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _99: &usize;                 // in scope 0 at chains-example\src\main.rs:61:29: 61:50
    let mut _100: for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at chains-example\src\main.rs:61:29: 61:50
    let _101: ();                        // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
    let mut _102: std::fmt::Arguments;   // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _103: &[&str];               // in scope 0 at chains-example\src\main.rs:63:14: 63:19
    let mut _104: &[&str; 1];            // in scope 0 at chains-example\src\main.rs:63:14: 63:19
    let _105: &[&str; 1];                // in scope 0 at chains-example\src\main.rs:63:14: 63:19
    let mut _106: &[std::fmt::ArgumentV1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _107: &[std::fmt::ArgumentV1; 0]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _108: &[std::fmt::ArgumentV1; 0]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _109: ();                        // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
    let mut _110: std::fmt::Arguments;   // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _111: &[&str];               // in scope 0 at chains-example\src\main.rs:64:14: 64:32
    let mut _112: &[&str; 2];            // in scope 0 at chains-example\src\main.rs:64:14: 64:32
    let _113: &[&str; 2];                // in scope 0 at chains-example\src\main.rs:64:14: 64:32
    let mut _114: &[std::fmt::ArgumentV1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _115: &[std::fmt::ArgumentV1; 1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _116: &[std::fmt::ArgumentV1; 1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _117: [std::fmt::ArgumentV1; 1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _118: (&isize,);             // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _119: &isize;                // in scope 0 at chains-example\src\main.rs:64:34: 64:42
    let mut _121: std::fmt::ArgumentV1;  // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _122: &isize;                // in scope 0 at chains-example\src\main.rs:64:34: 64:42
    let mut _123: for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at chains-example\src\main.rs:64:34: 64:42
    let _124: ();                        // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
    let mut _125: std::fmt::Arguments;   // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _126: &[&str];               // in scope 0 at chains-example\src\main.rs:65:14: 65:27
    let mut _127: &[&str; 2];            // in scope 0 at chains-example\src\main.rs:65:14: 65:27
    let _128: &[&str; 2];                // in scope 0 at chains-example\src\main.rs:65:14: 65:27
    let mut _129: &[std::fmt::ArgumentV1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _130: &[std::fmt::ArgumentV1; 1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _131: &[std::fmt::ArgumentV1; 1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _132: [std::fmt::ArgumentV1; 1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _133: (&usize,);             // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _134: &usize;                // in scope 0 at chains-example\src\main.rs:65:29: 65:53
    let _135: usize;                     // in scope 0 at chains-example\src\main.rs:65:29: 65:53
    let mut _136: &mut Chain3;           // in scope 0 at chains-example\src\main.rs:65:29: 65:30
    let mut _138: std::fmt::ArgumentV1;  // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _139: &usize;                // in scope 0 at chains-example\src\main.rs:65:29: 65:53
    let mut _140: for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at chains-example\src\main.rs:65:29: 65:53
    let _141: ();                        // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
    let mut _142: std::fmt::Arguments;   // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _143: &[&str];               // in scope 0 at chains-example\src\main.rs:66:14: 66:31
    let mut _144: &[&str; 2];            // in scope 0 at chains-example\src\main.rs:66:14: 66:31
    let _145: &[&str; 2];                // in scope 0 at chains-example\src\main.rs:66:14: 66:31
    let mut _146: &[std::fmt::ArgumentV1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _147: &[std::fmt::ArgumentV1; 1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _148: &[std::fmt::ArgumentV1; 1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let _149: [std::fmt::ArgumentV1; 1]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _150: (&isize,);             // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _151: &isize;                // in scope 0 at chains-example\src\main.rs:66:33: 66:41
    let mut _153: std::fmt::ArgumentV1;  // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _154: &isize;                // in scope 0 at chains-example\src\main.rs:66:33: 66:41
    let mut _155: for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at chains-example\src\main.rs:66:33: 66:41
    let mut _162: &[&str; 2];            // in scope 0 at chains-example\src\main.rs:58:14: 58:27
    let mut _163: &[&str; 2];            // in scope 0 at chains-example\src\main.rs:57:14: 57:27
    let mut _164: &[std::fmt::ArgumentV1; 0]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _165: &[&str; 1];            // in scope 0 at chains-example\src\main.rs:56:14: 56:19
    let mut _167: &[std::fmt::ArgumentV1; 0]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _168: &[&str; 1];            // in scope 0 at chains-example\src\main.rs:50:14: 50:44
    scope 1 {
        debug iter => _11;               // in scope 1 at chains-example\src\main.rs:52:14: 52:19
        let mut _12: u32;                // in scope 1 at chains-example\src\main.rs:52:14: 52:19
        scope 2 {
            debug __next => _12;         // in scope 2 at chains-example\src\main.rs:52:14: 52:19
            let _17: u32;                // in scope 2 at chains-example\src\main.rs:52:9: 52:10
            let _19: u32;                // in scope 2 at chains-example\src\main.rs:52:9: 52:10
            scope 3 {
                debug val => _17;        // in scope 3 at chains-example\src\main.rs:52:9: 52:10
            }
            scope 4 {
                debug i => _19;          // in scope 4 at chains-example\src\main.rs:52:9: 52:10
                let _34: &u32;           // in scope 4 at chains-example\src\main.rs:53:40: 53:41
                let _35: &u32;           // in scope 4 at chains-example\src\main.rs:53:43: 53:62
                let mut _166: &[&str; 3]; // in scope 4 at chains-example\src\main.rs:53:18: 53:38
                scope 5 {
                    debug arg0 => _34;   // in scope 5 at chains-example\src\main.rs:53:40: 53:41
                    debug arg1 => _35;   // in scope 5 at chains-example\src\main.rs:53:43: 53:62
                }
            }
        }
    }
    scope 6 {
        debug arg0 => _62;               // in scope 6 at chains-example\src\main.rs:57:29: 57:48
    }
    scope 7 {
        debug arg0 => _79;               // in scope 7 at chains-example\src\main.rs:58:29: 58:57
    }
    scope 8 {
        debug x => _83;                  // in scope 8 at chains-example\src\main.rs:60:9: 60:14
        let _97: &usize;                 // in scope 8 at chains-example\src\main.rs:61:29: 61:50
        let _120: &isize;                // in scope 8 at chains-example\src\main.rs:64:34: 64:42
        let _137: &usize;                // in scope 8 at chains-example\src\main.rs:65:29: 65:53
        let _152: &isize;                // in scope 8 at chains-example\src\main.rs:66:33: 66:41
        let mut _156: &[&str; 2];        // in scope 8 at chains-example\src\main.rs:66:14: 66:31
        let mut _157: &[&str; 2];        // in scope 8 at chains-example\src\main.rs:65:14: 65:27
        let mut _158: &[&str; 2];        // in scope 8 at chains-example\src\main.rs:64:14: 64:32
        let mut _159: &[std::fmt::ArgumentV1; 0]; // in scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        let mut _160: &[&str; 1];        // in scope 8 at chains-example\src\main.rs:63:14: 63:19
        let mut _161: &[&str; 2];        // in scope 8 at chains-example\src\main.rs:61:14: 61:27
        scope 9 {
            debug arg0 => _97;           // in scope 9 at chains-example\src\main.rs:61:29: 61:50
        }
        scope 10 {
            debug arg0 => _120;          // in scope 10 at chains-example\src\main.rs:64:34: 64:42
        }
        scope 11 {
            debug arg0 => _137;          // in scope 11 at chains-example\src\main.rs:65:29: 65:53
        }
        scope 12 {
            debug arg0 => _152;          // in scope 12 at chains-example\src\main.rs:66:33: 66:41
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
        StorageLive(_2);                 // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_3);                 // scope 0 at chains-example\src\main.rs:50:14: 50:44
        StorageLive(_4);                 // scope 0 at chains-example\src\main.rs:50:14: 50:44
        StorageLive(_5);                 // scope 0 at chains-example\src\main.rs:50:14: 50:44
        _168 = const main::promoted[12]; // scope 0 at chains-example\src\main.rs:50:14: 50:44
                                         // ty::Const
                                         // + ty: &[&str; 1]
                                         // + val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[12]))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:50:14: 50:44
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[12])) }
        _5 = _168;                       // scope 0 at chains-example\src\main.rs:50:14: 50:44
        _4 = _5;                         // scope 0 at chains-example\src\main.rs:50:14: 50:44
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at chains-example\src\main.rs:50:14: 50:44
        StorageDead(_4);                 // scope 0 at chains-example\src\main.rs:50:43: 50:44
        StorageLive(_6);                 // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_7);                 // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_8);                 // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _167 = const main::promoted[11]; // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: &[std::fmt::ArgumentV1; 0]
                                         // + val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[11]))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + literal: Const { ty: &[std::fmt::ArgumentV1; 0], val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[11])) }
        _8 = _167;                       // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _7 = _8;                         // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _6 = move _7 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_7);                 // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _2 = const std::fmt::Arguments::new_v1(move _3, move _6) -> bb1; // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_6);                 // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_3);                 // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _1 = const std::io::_print(move _2) -> bb2; // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
                                         // ty::Const
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_2);                 // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:61: 97:62
        StorageDead(_8);                 // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_5);                 // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_1);                 // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageLive(_9);                 // scope 0 at chains-example\src\main.rs:52:14: 52:19
        StorageLive(_10);                // scope 0 at chains-example\src\main.rs:52:14: 52:19
        (_10.0: u32) = const 0_u32;      // scope 0 at chains-example\src\main.rs:52:14: 52:19
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x00000000))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:52:14: 52:15
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }
        (_10.1: u32) = const 10_u32;     // scope 0 at chains-example\src\main.rs:52:14: 52:19
                                         // ty::Const
                                         // + ty: u32
                                         // + val: Value(Scalar(0x0000000a))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:52:17: 52:19
                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000000a)) }
        _9 = const <std::ops::Range<u32> as std::iter::IntoIterator>::into_iter(move _10) -> bb3; // scope 0 at chains-example\src\main.rs:52:14: 52:19
                                         // ty::Const
                                         // + ty: fn(std::ops::Range<u32>) -> <std::ops::Range<u32> as std::iter::IntoIterator>::IntoIter {<std::ops::Range<u32> as std::iter::IntoIterator>::into_iter}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:52:14: 52:19
                                         // + literal: Const { ty: fn(std::ops::Range<u32>) -> <std::ops::Range<u32> as std::iter::IntoIterator>::IntoIter {<std::ops::Range<u32> as std::iter::IntoIterator>::into_iter}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_10);                // scope 0 at chains-example\src\main.rs:52:18: 52:19
        StorageLive(_11);                // scope 0 at chains-example\src\main.rs:52:14: 52:19
        _11 = move _9;                   // scope 0 at chains-example\src\main.rs:52:14: 52:19
        goto -> bb4;                     // scope 1 at chains-example\src\main.rs:52:5: 54:6
    }

    bb4: {
        StorageLive(_12);                // scope 1 at chains-example\src\main.rs:52:14: 52:19
        StorageLive(_13);                // scope 2 at chains-example\src\main.rs:52:14: 52:19
        StorageLive(_14);                // scope 2 at chains-example\src\main.rs:52:14: 52:19
        StorageLive(_15);                // scope 2 at chains-example\src\main.rs:52:14: 52:19
        _15 = &mut _11;                  // scope 2 at chains-example\src\main.rs:52:14: 52:19
        _14 = &mut (*_15);               // scope 2 at chains-example\src\main.rs:52:14: 52:19
        _13 = const <std::ops::Range<u32> as std::iter::Iterator>::next(move _14) -> bb5; // scope 2 at chains-example\src\main.rs:52:14: 52:19
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut std::ops::Range<u32>) -> std::option::Option<<std::ops::Range<u32> as std::iter::Iterator>::Item> {<std::ops::Range<u32> as std::iter::Iterator>::next}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:52:14: 52:19
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<u32>) -> std::option::Option<<std::ops::Range<u32> as std::iter::Iterator>::Item> {<std::ops::Range<u32> as std::iter::Iterator>::next}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_14);                // scope 2 at chains-example\src\main.rs:52:18: 52:19
        _16 = discriminant(_13);         // scope 2 at chains-example\src\main.rs:52:9: 52:10
        switchInt(move _16) -> [0_isize: bb6, 1_isize: bb8, otherwise: bb7]; // scope 2 at chains-example\src\main.rs:52:9: 52:10
    }

    bb6: {
        StorageDead(_15);                // scope 2 at chains-example\src\main.rs:52:18: 52:19
        StorageDead(_13);                // scope 2 at chains-example\src\main.rs:52:18: 52:19
        StorageDead(_12);                // scope 1 at chains-example\src\main.rs:54:5: 54:6
        StorageDead(_11);                // scope 0 at chains-example\src\main.rs:54:5: 54:6
        StorageDead(_9);                 // scope 0 at chains-example\src\main.rs:52:18: 52:19
        StorageLive(_42);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
        StorageLive(_43);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_44);                // scope 0 at chains-example\src\main.rs:56:14: 56:19
        StorageLive(_45);                // scope 0 at chains-example\src\main.rs:56:14: 56:19
        StorageLive(_46);                // scope 0 at chains-example\src\main.rs:56:14: 56:19
        _165 = const main::promoted[9];  // scope 0 at chains-example\src\main.rs:56:14: 56:19
                                         // ty::Const
                                         // + ty: &[&str; 1]
                                         // + val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[9]))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:56:14: 56:19
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[9])) }
        _46 = _165;                      // scope 0 at chains-example\src\main.rs:56:14: 56:19
        _45 = _46;                       // scope 0 at chains-example\src\main.rs:56:14: 56:19
        _44 = move _45 as &[&str] (Pointer(Unsize)); // scope 0 at chains-example\src\main.rs:56:14: 56:19
        StorageDead(_45);                // scope 0 at chains-example\src\main.rs:56:18: 56:19
        StorageLive(_47);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_48);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_49);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _164 = const main::promoted[8];  // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: &[std::fmt::ArgumentV1; 0]
                                         // + val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[8]))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + literal: Const { ty: &[std::fmt::ArgumentV1; 0], val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[8])) }
        _49 = _164;                      // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _48 = _49;                       // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _47 = move _48 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_48);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _43 = const std::fmt::Arguments::new_v1(move _44, move _47) -> bb14; // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        unreachable;                     // scope 2 at chains-example\src\main.rs:52:14: 52:19
    }

    bb8: {
        StorageLive(_17);                // scope 2 at chains-example\src\main.rs:52:9: 52:10
        _17 = ((_13 as Some).0: u32);    // scope 2 at chains-example\src\main.rs:52:9: 52:10
        StorageLive(_18);                // scope 3 at chains-example\src\main.rs:52:9: 52:10
        _18 = _17;                       // scope 3 at chains-example\src\main.rs:52:9: 52:10
        _12 = move _18;                  // scope 3 at chains-example\src\main.rs:52:9: 52:10
        StorageDead(_18);                // scope 3 at chains-example\src\main.rs:52:9: 52:10
        StorageDead(_17);                // scope 2 at chains-example\src\main.rs:52:9: 52:10
        StorageDead(_15);                // scope 2 at chains-example\src\main.rs:52:18: 52:19
        StorageDead(_13);                // scope 2 at chains-example\src\main.rs:52:18: 52:19
        StorageLive(_19);                // scope 2 at chains-example\src\main.rs:52:9: 52:10
        _19 = _12;                       // scope 2 at chains-example\src\main.rs:52:14: 52:19
        StorageLive(_20);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
        StorageLive(_21);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_22);                // scope 4 at chains-example\src\main.rs:53:18: 53:38
        StorageLive(_23);                // scope 4 at chains-example\src\main.rs:53:18: 53:38
        StorageLive(_24);                // scope 4 at chains-example\src\main.rs:53:18: 53:38
        _166 = const main::promoted[10]; // scope 4 at chains-example\src\main.rs:53:18: 53:38
                                         // ty::Const
                                         // + ty: &[&str; 3]
                                         // + val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[10]))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:53:18: 53:38
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[10])) }
        _24 = _166;                      // scope 4 at chains-example\src\main.rs:53:18: 53:38
        _23 = _24;                       // scope 4 at chains-example\src\main.rs:53:18: 53:38
        _22 = move _23 as &[&str] (Pointer(Unsize)); // scope 4 at chains-example\src\main.rs:53:18: 53:38
        StorageDead(_23);                // scope 4 at chains-example\src\main.rs:53:37: 53:38
        StorageLive(_25);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_26);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_27);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_28);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_29);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_30);                // scope 4 at chains-example\src\main.rs:53:40: 53:41
        _30 = &_19;                      // scope 4 at chains-example\src\main.rs:53:40: 53:41
        StorageLive(_31);                // scope 4 at chains-example\src\main.rs:53:43: 53:62
        StorageLive(_32);                // scope 4 at chains-example\src\main.rs:53:43: 53:62
        StorageLive(_33);                // scope 4 at chains-example\src\main.rs:53:60: 53:61
        _33 = _19;                       // scope 4 at chains-example\src\main.rs:53:60: 53:61
        _32 = const chain_function_0(move _33) -> bb9; // scope 4 at chains-example\src\main.rs:53:43: 53:62
                                         // ty::Const
                                         // + ty: fn(u32) -> u32 {chain_function_0}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:53:43: 53:59
                                         // + literal: Const { ty: fn(u32) -> u32 {chain_function_0}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        StorageDead(_33);                // scope 4 at chains-example\src\main.rs:53:61: 53:62
        _31 = &_32;                      // scope 4 at chains-example\src\main.rs:53:43: 53:62
        (_29.0: &u32) = move _30;        // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        (_29.1: &u32) = move _31;        // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_31);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_30);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageLive(_34);                // scope 4 at chains-example\src\main.rs:53:40: 53:41
        _34 = (_29.0: &u32);             // scope 4 at chains-example\src\main.rs:53:40: 53:41
        StorageLive(_35);                // scope 4 at chains-example\src\main.rs:53:43: 53:62
        _35 = (_29.1: &u32);             // scope 4 at chains-example\src\main.rs:53:43: 53:62
        StorageLive(_36);                // scope 5 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_37);                // scope 5 at chains-example\src\main.rs:53:40: 53:41
        _37 = _34;                       // scope 5 at chains-example\src\main.rs:53:40: 53:41
        StorageLive(_38);                // scope 5 at chains-example\src\main.rs:53:40: 53:41
        _38 = const <u32 as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at chains-example\src\main.rs:53:40: 53:41
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<u32 as std::fmt::Display>::fmt}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:53:40: 53:41
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<u32 as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _36 = const std::fmt::ArgumentV1::new::<u32>(move _37, move _38) -> bb10; // scope 5 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: for<'b> fn(&'b u32, for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<u32>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b u32, for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<u32>}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        StorageDead(_38);                // scope 5 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_37);                // scope 5 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageLive(_39);                // scope 5 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_40);                // scope 5 at chains-example\src\main.rs:53:43: 53:62
        _40 = _35;                       // scope 5 at chains-example\src\main.rs:53:43: 53:62
        StorageLive(_41);                // scope 5 at chains-example\src\main.rs:53:43: 53:62
        _41 = const <u32 as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at chains-example\src\main.rs:53:43: 53:62
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<u32 as std::fmt::Display>::fmt}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:53:43: 53:62
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<u32 as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _39 = const std::fmt::ArgumentV1::new::<u32>(move _40, move _41) -> bb11; // scope 5 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: for<'b> fn(&'b u32, for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<u32>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b u32, for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<u32>}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_41);                // scope 5 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_40);                // scope 5 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _28 = [move _36, move _39];      // scope 5 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_39);                // scope 5 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_36);                // scope 5 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_35);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_34);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _27 = &_28;                      // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _26 = _27;                       // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _25 = move _26 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_26);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _21 = const std::fmt::Arguments::new_v1(move _22, move _25) -> bb12; // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        StorageDead(_25);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_22);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _20 = const std::io::_print(move _21) -> bb13; // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
                                         // ty::Const
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_21);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:61: 97:62
        StorageDead(_32);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_29);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_28);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_27);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_24);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_20);                // scope 4 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_19);                // scope 2 at chains-example\src\main.rs:54:5: 54:6
        StorageDead(_12);                // scope 1 at chains-example\src\main.rs:54:5: 54:6
        goto -> bb4;                     // scope 1 at chains-example\src\main.rs:52:5: 54:6
    }

    bb14: {
        StorageDead(_47);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_44);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _42 = const std::io::_print(move _43) -> bb15; // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
                                         // ty::Const
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        StorageDead(_43);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:61: 97:62
        StorageDead(_49);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_46);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_42);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageLive(_50);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
        StorageLive(_51);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_52);                // scope 0 at chains-example\src\main.rs:57:14: 57:27
        StorageLive(_53);                // scope 0 at chains-example\src\main.rs:57:14: 57:27
        StorageLive(_54);                // scope 0 at chains-example\src\main.rs:57:14: 57:27
        _163 = const main::promoted[7];  // scope 0 at chains-example\src\main.rs:57:14: 57:27
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[7]))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:57:14: 57:27
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[7])) }
        _54 = _163;                      // scope 0 at chains-example\src\main.rs:57:14: 57:27
        _53 = _54;                       // scope 0 at chains-example\src\main.rs:57:14: 57:27
        _52 = move _53 as &[&str] (Pointer(Unsize)); // scope 0 at chains-example\src\main.rs:57:14: 57:27
        StorageDead(_53);                // scope 0 at chains-example\src\main.rs:57:26: 57:27
        StorageLive(_55);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_56);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_57);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_58);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_59);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_60);                // scope 0 at chains-example\src\main.rs:57:29: 57:48
        StorageLive(_61);                // scope 0 at chains-example\src\main.rs:57:29: 57:48
        _61 = const chain_function_1(const 3_isize) -> bb16; // scope 0 at chains-example\src\main.rs:57:29: 57:48
                                         // ty::Const
                                         // + ty: fn(isize) -> isize {chain_function_1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:57:29: 57:45
                                         // + literal: Const { ty: fn(isize) -> isize {chain_function_1}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: isize
                                         // + val: Value(Scalar(0x0000000000000003))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:57:46: 57:47
                                         // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000003)) }
    }

    bb16: {
        _60 = &_61;                      // scope 0 at chains-example\src\main.rs:57:29: 57:48
        (_59.0: &isize) = move _60;      // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_60);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageLive(_62);                // scope 0 at chains-example\src\main.rs:57:29: 57:48
        _62 = (_59.0: &isize);           // scope 0 at chains-example\src\main.rs:57:29: 57:48
        StorageLive(_63);                // scope 6 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_64);                // scope 6 at chains-example\src\main.rs:57:29: 57:48
        _64 = _62;                       // scope 6 at chains-example\src\main.rs:57:29: 57:48
        StorageLive(_65);                // scope 6 at chains-example\src\main.rs:57:29: 57:48
        _65 = const <isize as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 6 at chains-example\src\main.rs:57:29: 57:48
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<isize as std::fmt::Display>::fmt}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:57:29: 57:48
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<isize as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _63 = const std::fmt::ArgumentV1::new::<isize>(move _64, move _65) -> bb17; // scope 6 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: for<'b> fn(&'b isize, for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<isize>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b> fn(&'b isize, for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<isize>}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        StorageDead(_65);                // scope 6 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_64);                // scope 6 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _58 = [move _63];                // scope 6 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_63);                // scope 6 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_62);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _57 = &_58;                      // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _56 = _57;                       // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _55 = move _56 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_56);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _51 = const std::fmt::Arguments::new_v1(move _52, move _55) -> bb18; // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        StorageDead(_55);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_52);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _50 = const std::io::_print(move _51) -> bb19; // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
                                         // ty::Const
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        StorageDead(_51);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:61: 97:62
        StorageDead(_61);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_59);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_58);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_57);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_54);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_50);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageLive(_66);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
        StorageLive(_67);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_68);                // scope 0 at chains-example\src\main.rs:58:14: 58:27
        StorageLive(_69);                // scope 0 at chains-example\src\main.rs:58:14: 58:27
        StorageLive(_70);                // scope 0 at chains-example\src\main.rs:58:14: 58:27
        _162 = const main::promoted[6];  // scope 0 at chains-example\src\main.rs:58:14: 58:27
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[6]))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:58:14: 58:27
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[6])) }
        _70 = _162;                      // scope 0 at chains-example\src\main.rs:58:14: 58:27
        _69 = _70;                       // scope 0 at chains-example\src\main.rs:58:14: 58:27
        _68 = move _69 as &[&str] (Pointer(Unsize)); // scope 0 at chains-example\src\main.rs:58:14: 58:27
        StorageDead(_69);                // scope 0 at chains-example\src\main.rs:58:26: 58:27
        StorageLive(_71);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_72);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_73);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_74);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_75);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_76);                // scope 0 at chains-example\src\main.rs:58:29: 58:57
        StorageLive(_77);                // scope 0 at chains-example\src\main.rs:58:29: 58:57
        StorageLive(_78);                // scope 0 at chains-example\src\main.rs:58:49: 58:53
        _78 = const std::option::Option::<()>::None; // scope 0 at chains-example\src\main.rs:58:49: 58:53
                                         // ty::Const
                                         // + ty: std::option::Option<()>
                                         // + val: Value(Scalar(0x00))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:58:49: 58:53
                                         // + literal: Const { ty: std::option::Option<()>, val: Value(Scalar(0x00)) }
        _77 = const chain_function_2(const 3_usize, move _78, const 2_usize) -> bb20; // scope 0 at chains-example\src\main.rs:58:29: 58:57
                                         // ty::Const
                                         // + ty: fn(usize, std::option::Option<()>, usize) -> usize {chain_function_2}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:58:29: 58:45
                                         // + literal: Const { ty: fn(usize, std::option::Option<()>, usize) -> usize {chain_function_2}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000003))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:58:46: 58:47
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000002))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:58:55: 58:56
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }
    }

    bb20: {
        StorageDead(_78);                // scope 0 at chains-example\src\main.rs:58:56: 58:57
        _76 = &_77;                      // scope 0 at chains-example\src\main.rs:58:29: 58:57
        (_75.0: &usize) = move _76;      // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_76);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageLive(_79);                // scope 0 at chains-example\src\main.rs:58:29: 58:57
        _79 = (_75.0: &usize);           // scope 0 at chains-example\src\main.rs:58:29: 58:57
        StorageLive(_80);                // scope 7 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_81);                // scope 7 at chains-example\src\main.rs:58:29: 58:57
        _81 = _79;                       // scope 7 at chains-example\src\main.rs:58:29: 58:57
        StorageLive(_82);                // scope 7 at chains-example\src\main.rs:58:29: 58:57
        _82 = const <usize as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 7 at chains-example\src\main.rs:58:29: 58:57
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<usize as std::fmt::Display>::fmt}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:58:29: 58:57
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<usize as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _80 = const std::fmt::ArgumentV1::new::<usize>(move _81, move _82) -> bb21; // scope 7 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: for<'b> fn(&'b usize, for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<usize>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'b> fn(&'b usize, for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        StorageDead(_82);                // scope 7 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_81);                // scope 7 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _74 = [move _80];                // scope 7 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_80);                // scope 7 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_79);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _73 = &_74;                      // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _72 = _73;                       // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _71 = move _72 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_72);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _67 = const std::fmt::Arguments::new_v1(move _68, move _71) -> bb22; // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        StorageDead(_71);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_68);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _66 = const std::io::_print(move _67) -> bb23; // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
                                         // ty::Const
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb23: {
        StorageDead(_67);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:61: 97:62
        StorageDead(_77);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_75);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_74);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_73);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_70);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_66);                // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageLive(_83);                // scope 0 at chains-example\src\main.rs:60:9: 60:14
        _83 = const Chain3 { member: 0_isize }; // scope 0 at chains-example\src\main.rs:60:17: 60:37
                                         // ty::Const
                                         // + ty: Chain3
                                         // + val: Value(Scalar(0x0000000000000000))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:60:17: 60:37
                                         // + literal: Const { ty: Chain3, val: Value(Scalar(0x0000000000000000)) }
        StorageLive(_84);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
        StorageLive(_85);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_86);                // scope 8 at chains-example\src\main.rs:61:14: 61:27
        StorageLive(_87);                // scope 8 at chains-example\src\main.rs:61:14: 61:27
        StorageLive(_88);                // scope 8 at chains-example\src\main.rs:61:14: 61:27
        _161 = const main::promoted[5];  // scope 8 at chains-example\src\main.rs:61:14: 61:27
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[5]))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:61:14: 61:27
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[5])) }
        _88 = _161;                      // scope 8 at chains-example\src\main.rs:61:14: 61:27
        _87 = _88;                       // scope 8 at chains-example\src\main.rs:61:14: 61:27
        _86 = move _87 as &[&str] (Pointer(Unsize)); // scope 8 at chains-example\src\main.rs:61:14: 61:27
        StorageDead(_87);                // scope 8 at chains-example\src\main.rs:61:26: 61:27
        StorageLive(_89);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_90);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_91);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_92);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_93);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_94);                // scope 8 at chains-example\src\main.rs:61:29: 61:50
        StorageLive(_95);                // scope 8 at chains-example\src\main.rs:61:29: 61:50
        StorageLive(_96);                // scope 8 at chains-example\src\main.rs:61:29: 61:30
        _96 = &_83;                      // scope 8 at chains-example\src\main.rs:61:29: 61:30
        _95 = const Chain3::chain_function_3(move _96, const 3_usize) -> bb24; // scope 8 at chains-example\src\main.rs:61:29: 61:50
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r Chain3, usize) -> usize {Chain3::chain_function_3}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:61:31: 61:47
                                         // + literal: Const { ty: for<'r> fn(&'r Chain3, usize) -> usize {Chain3::chain_function_3}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000003))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:61:48: 61:49
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }
    }

    bb24: {
        StorageDead(_96);                // scope 8 at chains-example\src\main.rs:61:49: 61:50
        _94 = &_95;                      // scope 8 at chains-example\src\main.rs:61:29: 61:50
        (_93.0: &usize) = move _94;      // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_94);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageLive(_97);                // scope 8 at chains-example\src\main.rs:61:29: 61:50
        _97 = (_93.0: &usize);           // scope 8 at chains-example\src\main.rs:61:29: 61:50
        StorageLive(_98);                // scope 9 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_99);                // scope 9 at chains-example\src\main.rs:61:29: 61:50
        _99 = _97;                       // scope 9 at chains-example\src\main.rs:61:29: 61:50
        StorageLive(_100);               // scope 9 at chains-example\src\main.rs:61:29: 61:50
        _100 = const <usize as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 9 at chains-example\src\main.rs:61:29: 61:50
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<usize as std::fmt::Display>::fmt}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:61:29: 61:50
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<usize as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _98 = const std::fmt::ArgumentV1::new::<usize>(move _99, move _100) -> bb25; // scope 9 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: for<'b> fn(&'b usize, for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<usize>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'b> fn(&'b usize, for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb25: {
        StorageDead(_100);               // scope 9 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_99);                // scope 9 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _92 = [move _98];                // scope 9 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_98);                // scope 9 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_97);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _91 = &_92;                      // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _90 = _91;                       // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _89 = move _90 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_90);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _85 = const std::fmt::Arguments::new_v1(move _86, move _89) -> bb26; // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb26: {
        StorageDead(_89);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_86);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _84 = const std::io::_print(move _85) -> bb27; // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
                                         // ty::Const
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb27: {
        StorageDead(_85);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:61: 97:62
        StorageDead(_95);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_93);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_92);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_91);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_88);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_84);                // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageLive(_101);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
        StorageLive(_102);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_103);               // scope 8 at chains-example\src\main.rs:63:14: 63:19
        StorageLive(_104);               // scope 8 at chains-example\src\main.rs:63:14: 63:19
        StorageLive(_105);               // scope 8 at chains-example\src\main.rs:63:14: 63:19
        _160 = const main::promoted[4];  // scope 8 at chains-example\src\main.rs:63:14: 63:19
                                         // ty::Const
                                         // + ty: &[&str; 1]
                                         // + val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[4]))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:63:14: 63:19
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[4])) }
        _105 = _160;                     // scope 8 at chains-example\src\main.rs:63:14: 63:19
        _104 = _105;                     // scope 8 at chains-example\src\main.rs:63:14: 63:19
        _103 = move _104 as &[&str] (Pointer(Unsize)); // scope 8 at chains-example\src\main.rs:63:14: 63:19
        StorageDead(_104);               // scope 8 at chains-example\src\main.rs:63:18: 63:19
        StorageLive(_106);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_107);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_108);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _159 = const main::promoted[3];  // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: &[std::fmt::ArgumentV1; 0]
                                         // + val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[3]))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + literal: Const { ty: &[std::fmt::ArgumentV1; 0], val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[3])) }
        _108 = _159;                     // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _107 = _108;                     // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _106 = move _107 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_107);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _102 = const std::fmt::Arguments::new_v1(move _103, move _106) -> bb28; // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb28: {
        StorageDead(_106);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_103);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _101 = const std::io::_print(move _102) -> bb29; // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
                                         // ty::Const
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb29: {
        StorageDead(_102);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:61: 97:62
        StorageDead(_108);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_105);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_101);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageLive(_109);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
        StorageLive(_110);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_111);               // scope 8 at chains-example\src\main.rs:64:14: 64:32
        StorageLive(_112);               // scope 8 at chains-example\src\main.rs:64:14: 64:32
        StorageLive(_113);               // scope 8 at chains-example\src\main.rs:64:14: 64:32
        _158 = const main::promoted[2];  // scope 8 at chains-example\src\main.rs:64:14: 64:32
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[2]))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:64:14: 64:32
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[2])) }
        _113 = _158;                     // scope 8 at chains-example\src\main.rs:64:14: 64:32
        _112 = _113;                     // scope 8 at chains-example\src\main.rs:64:14: 64:32
        _111 = move _112 as &[&str] (Pointer(Unsize)); // scope 8 at chains-example\src\main.rs:64:14: 64:32
        StorageDead(_112);               // scope 8 at chains-example\src\main.rs:64:31: 64:32
        StorageLive(_114);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_115);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_116);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_117);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_118);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_119);               // scope 8 at chains-example\src\main.rs:64:34: 64:42
        _119 = &(_83.0: isize);          // scope 8 at chains-example\src\main.rs:64:34: 64:42
        (_118.0: &isize) = move _119;    // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_119);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageLive(_120);               // scope 8 at chains-example\src\main.rs:64:34: 64:42
        _120 = (_118.0: &isize);         // scope 8 at chains-example\src\main.rs:64:34: 64:42
        StorageLive(_121);               // scope 10 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_122);               // scope 10 at chains-example\src\main.rs:64:34: 64:42
        _122 = _120;                     // scope 10 at chains-example\src\main.rs:64:34: 64:42
        StorageLive(_123);               // scope 10 at chains-example\src\main.rs:64:34: 64:42
        _123 = const <isize as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 10 at chains-example\src\main.rs:64:34: 64:42
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<isize as std::fmt::Display>::fmt}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:64:34: 64:42
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<isize as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _121 = const std::fmt::ArgumentV1::new::<isize>(move _122, move _123) -> bb30; // scope 10 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: for<'b> fn(&'b isize, for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<isize>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'b> fn(&'b isize, for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<isize>}, val: Value(Scalar(<ZST>)) }
    }

    bb30: {
        StorageDead(_123);               // scope 10 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_122);               // scope 10 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _117 = [move _121];              // scope 10 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_121);               // scope 10 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_120);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _116 = &_117;                    // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _115 = _116;                     // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _114 = move _115 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_115);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _110 = const std::fmt::Arguments::new_v1(move _111, move _114) -> bb31; // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb31: {
        StorageDead(_114);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_111);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _109 = const std::io::_print(move _110) -> bb32; // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
                                         // ty::Const
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb32: {
        StorageDead(_110);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:61: 97:62
        StorageDead(_118);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_117);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_116);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_113);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_109);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageLive(_124);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
        StorageLive(_125);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_126);               // scope 8 at chains-example\src\main.rs:65:14: 65:27
        StorageLive(_127);               // scope 8 at chains-example\src\main.rs:65:14: 65:27
        StorageLive(_128);               // scope 8 at chains-example\src\main.rs:65:14: 65:27
        _157 = const main::promoted[1];  // scope 8 at chains-example\src\main.rs:65:14: 65:27
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[1]))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:65:14: 65:27
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[1])) }
        _128 = _157;                     // scope 8 at chains-example\src\main.rs:65:14: 65:27
        _127 = _128;                     // scope 8 at chains-example\src\main.rs:65:14: 65:27
        _126 = move _127 as &[&str] (Pointer(Unsize)); // scope 8 at chains-example\src\main.rs:65:14: 65:27
        StorageDead(_127);               // scope 8 at chains-example\src\main.rs:65:26: 65:27
        StorageLive(_129);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_130);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_131);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_132);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_133);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_134);               // scope 8 at chains-example\src\main.rs:65:29: 65:53
        StorageLive(_135);               // scope 8 at chains-example\src\main.rs:65:29: 65:53
        StorageLive(_136);               // scope 8 at chains-example\src\main.rs:65:29: 65:30
        _136 = &mut _83;                 // scope 8 at chains-example\src\main.rs:65:29: 65:30
        _135 = const Chain3::chain_function_4(move _136, const 3_usize, const 2_usize) -> bb33; // scope 8 at chains-example\src\main.rs:65:29: 65:53
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut Chain3, usize, usize) -> usize {Chain3::chain_function_4}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:65:31: 65:47
                                         // + literal: Const { ty: for<'r> fn(&'r mut Chain3, usize, usize) -> usize {Chain3::chain_function_4}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000003))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:65:48: 65:49
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000002))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:65:51: 65:52
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }
    }

    bb33: {
        StorageDead(_136);               // scope 8 at chains-example\src\main.rs:65:52: 65:53
        _134 = &_135;                    // scope 8 at chains-example\src\main.rs:65:29: 65:53
        (_133.0: &usize) = move _134;    // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_134);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageLive(_137);               // scope 8 at chains-example\src\main.rs:65:29: 65:53
        _137 = (_133.0: &usize);         // scope 8 at chains-example\src\main.rs:65:29: 65:53
        StorageLive(_138);               // scope 11 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_139);               // scope 11 at chains-example\src\main.rs:65:29: 65:53
        _139 = _137;                     // scope 11 at chains-example\src\main.rs:65:29: 65:53
        StorageLive(_140);               // scope 11 at chains-example\src\main.rs:65:29: 65:53
        _140 = const <usize as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 11 at chains-example\src\main.rs:65:29: 65:53
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<usize as std::fmt::Display>::fmt}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:65:29: 65:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<usize as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _138 = const std::fmt::ArgumentV1::new::<usize>(move _139, move _140) -> bb34; // scope 11 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: for<'b> fn(&'b usize, for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<usize>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: for<'b> fn(&'b usize, for<'r, 's, 't0> fn(&'r usize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb34: {
        StorageDead(_140);               // scope 11 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_139);               // scope 11 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _132 = [move _138];              // scope 11 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_138);               // scope 11 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_137);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _131 = &_132;                    // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _130 = _131;                     // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _129 = move _130 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_130);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _125 = const std::fmt::Arguments::new_v1(move _126, move _129) -> bb35; // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb35: {
        StorageDead(_129);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_126);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _124 = const std::io::_print(move _125) -> bb36; // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
                                         // ty::Const
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb36: {
        StorageDead(_125);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:61: 97:62
        StorageDead(_135);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_133);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_132);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_131);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_128);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_124);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageLive(_141);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
        StorageLive(_142);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_143);               // scope 8 at chains-example\src\main.rs:66:14: 66:31
        StorageLive(_144);               // scope 8 at chains-example\src\main.rs:66:14: 66:31
        StorageLive(_145);               // scope 8 at chains-example\src\main.rs:66:14: 66:31
        _156 = const main::promoted[0];  // scope 8 at chains-example\src\main.rs:66:14: 66:31
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:66:14: 66:31
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(DefId(0:12 ~ chains_example[33f3]::main[0]), [], Some(promoted[0])) }
        _145 = _156;                     // scope 8 at chains-example\src\main.rs:66:14: 66:31
        _144 = _145;                     // scope 8 at chains-example\src\main.rs:66:14: 66:31
        _143 = move _144 as &[&str] (Pointer(Unsize)); // scope 8 at chains-example\src\main.rs:66:14: 66:31
        StorageDead(_144);               // scope 8 at chains-example\src\main.rs:66:30: 66:31
        StorageLive(_146);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_147);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_148);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_149);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_150);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_151);               // scope 8 at chains-example\src\main.rs:66:33: 66:41
        _151 = &(_83.0: isize);          // scope 8 at chains-example\src\main.rs:66:33: 66:41
        (_150.0: &isize) = move _151;    // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_151);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageLive(_152);               // scope 8 at chains-example\src\main.rs:66:33: 66:41
        _152 = (_150.0: &isize);         // scope 8 at chains-example\src\main.rs:66:33: 66:41
        StorageLive(_153);               // scope 12 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageLive(_154);               // scope 12 at chains-example\src\main.rs:66:33: 66:41
        _154 = _152;                     // scope 12 at chains-example\src\main.rs:66:33: 66:41
        StorageLive(_155);               // scope 12 at chains-example\src\main.rs:66:33: 66:41
        _155 = const <isize as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 12 at chains-example\src\main.rs:66:33: 66:41
                                         // ty::Const
                                         // + ty: for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<isize as std::fmt::Display>::fmt}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:66:33: 66:41
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<isize as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _153 = const std::fmt::ArgumentV1::new::<isize>(move _154, move _155) -> bb37; // scope 12 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: for<'b> fn(&'b isize, for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<isize>}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: for<'b> fn(&'b isize, for<'r, 's, 't0> fn(&'r isize, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<isize>}, val: Value(Scalar(<ZST>)) }
    }

    bb37: {
        StorageDead(_155);               // scope 12 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_154);               // scope 12 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _149 = [move _153];              // scope 12 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_153);               // scope 12 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_152);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _148 = &_149;                    // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _147 = _148;                     // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _146 = move _147 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        StorageDead(_147);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _142 = const std::fmt::Arguments::new_v1(move _143, move _146) -> bb38; // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // ty::Const
                                         // + ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: fn(&[&str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb38: {
        StorageDead(_146);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        StorageDead(_143);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:60: 97:61
        _141 = const std::io::_print(move _142) -> bb39; // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:62
                                         // ty::Const
                                         // + ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: D:\Development\Rust\rustc\src\libstd\macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb39: {
        StorageDead(_142);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:61: 97:62
        StorageDead(_150);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_149);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_148);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_145);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        StorageDead(_141);               // scope 8 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:62: 97:63
        _0 = const ();                   // scope 0 at chains-example\src\main.rs:49:11: 67:2
                                         // ty::Const
                                         // + ty: ()
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:49:11: 67:2
                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }
        StorageDead(_83);                // scope 0 at chains-example\src\main.rs:67:1: 67:2
        return;                          // scope 0 at chains-example\src\main.rs:67:2: 67:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at chains-example\src\main.rs:66:14: 66:31
    let mut _1: [&str; 2];               // in scope 0 at chains-example\src\main.rs:66:14: 66:31
    let mut _2: &str;                    // in scope 0 at chains-example\src\main.rs:66:14: 66:31
    let mut _3: &str;                    // in scope 0 at chains-example\src\main.rs:66:14: 66:31
    let mut _4: &str;                    // in scope 0 at chains-example\src\main.rs:66:14: 66:31
    let mut _5: &str;                    // in scope 0 at chains-example\src\main.rs:66:14: 66:31
    scope 1 {
        scope 2 {
            scope 3 {
            }
            scope 4 {
                scope 5 {
                }
            }
        }
    }
    scope 6 {
    }
    scope 7 {
    }
    scope 8 {
        scope 9 {
        }
        scope 10 {
        }
        scope 11 {
        }
        scope 12 {
        }
    }

    bb0: {
        _3 = const "Value after: ";      // scope 0 at chains-example\src\main.rs:66:14: 66:31
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [86, 97, 108, 117, 101, 32, 97, 102, 116, 101, 114, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:66:14: 66:31
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [86, 97, 108, 117, 101, 32, 97, 102, 116, 101, 114, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
        _2 = _3;                         // scope 0 at chains-example\src\main.rs:66:14: 66:31
        _5 = const "\n";                 // scope 0 at chains-example\src\main.rs:66:14: 66:31
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:66:14: 66:31
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _4 = _5;                         // scope 0 at chains-example\src\main.rs:66:14: 66:31
        _1 = [move _2, move _4];         // scope 0 at chains-example\src\main.rs:66:14: 66:31
        _0 = &_1;                        // scope 0 at chains-example\src\main.rs:66:14: 66:31
        return;                          // scope 0 at chains-example\src\main.rs:66:14: 66:31
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at chains-example\src\main.rs:65:14: 65:27
    let mut _1: [&str; 2];               // in scope 0 at chains-example\src\main.rs:65:14: 65:27
    let mut _2: &str;                    // in scope 0 at chains-example\src\main.rs:65:14: 65:27
    let mut _3: &str;                    // in scope 0 at chains-example\src\main.rs:65:14: 65:27
    let mut _4: &str;                    // in scope 0 at chains-example\src\main.rs:65:14: 65:27
    let mut _5: &str;                    // in scope 0 at chains-example\src\main.rs:65:14: 65:27
    scope 1 {
        scope 2 {
            scope 3 {
            }
            scope 4 {
                scope 5 {
                }
            }
        }
    }
    scope 6 {
    }
    scope 7 {
    }
    scope 8 {
        scope 9 {
        }
        scope 10 {
        }
        scope 11 {
        }
        scope 12 {
        }
    }

    bb0: {
        _3 = const "Chain 4: ";          // scope 0 at chains-example\src\main.rs:65:14: 65:27
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 32, 52, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, size: Size { raw: 9 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:65:14: 65:27
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 32, 52, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, size: Size { raw: 9 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
        _2 = _3;                         // scope 0 at chains-example\src\main.rs:65:14: 65:27
        _5 = const "\n";                 // scope 0 at chains-example\src\main.rs:65:14: 65:27
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:65:14: 65:27
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _4 = _5;                         // scope 0 at chains-example\src\main.rs:65:14: 65:27
        _1 = [move _2, move _4];         // scope 0 at chains-example\src\main.rs:65:14: 65:27
        _0 = &_1;                        // scope 0 at chains-example\src\main.rs:65:14: 65:27
        return;                          // scope 0 at chains-example\src\main.rs:65:14: 65:27
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at chains-example\src\main.rs:64:14: 64:32
    let mut _1: [&str; 2];               // in scope 0 at chains-example\src\main.rs:64:14: 64:32
    let mut _2: &str;                    // in scope 0 at chains-example\src\main.rs:64:14: 64:32
    let mut _3: &str;                    // in scope 0 at chains-example\src\main.rs:64:14: 64:32
    let mut _4: &str;                    // in scope 0 at chains-example\src\main.rs:64:14: 64:32
    let mut _5: &str;                    // in scope 0 at chains-example\src\main.rs:64:14: 64:32
    scope 1 {
        scope 2 {
            scope 3 {
            }
            scope 4 {
                scope 5 {
                }
            }
        }
    }
    scope 6 {
    }
    scope 7 {
    }
    scope 8 {
        scope 9 {
        }
        scope 10 {
        }
        scope 11 {
        }
        scope 12 {
        }
    }

    bb0: {
        _3 = const "Value before: ";     // scope 0 at chains-example\src\main.rs:64:14: 64:32
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [86, 97, 108, 117, 101, 32, 98, 101, 102, 111, 114, 101, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:64:14: 64:32
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [86, 97, 108, 117, 101, 32, 98, 101, 102, 111, 114, 101, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }
        _2 = _3;                         // scope 0 at chains-example\src\main.rs:64:14: 64:32
        _5 = const "\n";                 // scope 0 at chains-example\src\main.rs:64:14: 64:32
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:64:14: 64:32
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _4 = _5;                         // scope 0 at chains-example\src\main.rs:64:14: 64:32
        _1 = [move _2, move _4];         // scope 0 at chains-example\src\main.rs:64:14: 64:32
        _0 = &_1;                        // scope 0 at chains-example\src\main.rs:64:14: 64:32
        return;                          // scope 0 at chains-example\src\main.rs:64:14: 64:32
    }
}

promoted[3] in main: &[std::fmt::ArgumentV1; 0] = {
    let mut _0: &[std::fmt::ArgumentV1; 0]; // return place in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _1: [std::fmt::ArgumentV1; 0]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    scope 1 {
        scope 2 {
            scope 3 {
            }
            scope 4 {
                scope 5 {
                }
            }
        }
    }
    scope 6 {
    }
    scope 7 {
    }
    scope 8 {
        scope 9 {
        }
        scope 10 {
        }
        scope 11 {
        }
        scope 12 {
        }
    }

    bb0: {
        _1 = [];                         // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _0 = &_1;                        // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        return;                          // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    }
}

promoted[4] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at chains-example\src\main.rs:63:14: 63:19
    let mut _1: [&str; 1];               // in scope 0 at chains-example\src\main.rs:63:14: 63:19
    let mut _2: &str;                    // in scope 0 at chains-example\src\main.rs:63:14: 63:19
    let mut _3: &str;                    // in scope 0 at chains-example\src\main.rs:63:14: 63:19
    scope 1 {
        scope 2 {
            scope 3 {
            }
            scope 4 {
                scope 5 {
                }
            }
        }
    }
    scope 6 {
    }
    scope 7 {
    }
    scope 8 {
        scope 9 {
        }
        scope 10 {
        }
        scope 11 {
        }
        scope 12 {
        }
    }

    bb0: {
        _3 = const "---\n";              // scope 0 at chains-example\src\main.rs:63:14: 63:19
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [45, 45, 45, 10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, size: Size { raw: 4 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:63:14: 63:19
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [45, 45, 45, 10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, size: Size { raw: 4 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
        _2 = _3;                         // scope 0 at chains-example\src\main.rs:63:14: 63:19
        _1 = [move _2];                  // scope 0 at chains-example\src\main.rs:63:14: 63:19
        _0 = &_1;                        // scope 0 at chains-example\src\main.rs:63:14: 63:19
        return;                          // scope 0 at chains-example\src\main.rs:63:14: 63:19
    }
}

promoted[5] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at chains-example\src\main.rs:61:14: 61:27
    let mut _1: [&str; 2];               // in scope 0 at chains-example\src\main.rs:61:14: 61:27
    let mut _2: &str;                    // in scope 0 at chains-example\src\main.rs:61:14: 61:27
    let mut _3: &str;                    // in scope 0 at chains-example\src\main.rs:61:14: 61:27
    let mut _4: &str;                    // in scope 0 at chains-example\src\main.rs:61:14: 61:27
    let mut _5: &str;                    // in scope 0 at chains-example\src\main.rs:61:14: 61:27
    scope 1 {
        scope 2 {
            scope 3 {
            }
            scope 4 {
                scope 5 {
                }
            }
        }
    }
    scope 6 {
    }
    scope 7 {
    }
    scope 8 {
        scope 9 {
        }
        scope 10 {
        }
        scope 11 {
        }
        scope 12 {
        }
    }

    bb0: {
        _3 = const "Chain 3: ";          // scope 0 at chains-example\src\main.rs:61:14: 61:27
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 32, 51, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, size: Size { raw: 9 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:61:14: 61:27
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 32, 51, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, size: Size { raw: 9 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
        _2 = _3;                         // scope 0 at chains-example\src\main.rs:61:14: 61:27
        _5 = const "\n";                 // scope 0 at chains-example\src\main.rs:61:14: 61:27
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:61:14: 61:27
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _4 = _5;                         // scope 0 at chains-example\src\main.rs:61:14: 61:27
        _1 = [move _2, move _4];         // scope 0 at chains-example\src\main.rs:61:14: 61:27
        _0 = &_1;                        // scope 0 at chains-example\src\main.rs:61:14: 61:27
        return;                          // scope 0 at chains-example\src\main.rs:61:14: 61:27
    }
}

promoted[6] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at chains-example\src\main.rs:58:14: 58:27
    let mut _1: [&str; 2];               // in scope 0 at chains-example\src\main.rs:58:14: 58:27
    let mut _2: &str;                    // in scope 0 at chains-example\src\main.rs:58:14: 58:27
    let mut _3: &str;                    // in scope 0 at chains-example\src\main.rs:58:14: 58:27
    let mut _4: &str;                    // in scope 0 at chains-example\src\main.rs:58:14: 58:27
    let mut _5: &str;                    // in scope 0 at chains-example\src\main.rs:58:14: 58:27
    scope 1 {
        scope 2 {
            scope 3 {
            }
            scope 4 {
                scope 5 {
                }
            }
        }
    }
    scope 6 {
    }
    scope 7 {
    }
    scope 8 {
        scope 9 {
        }
        scope 10 {
        }
        scope 11 {
        }
        scope 12 {
        }
    }

    bb0: {
        _3 = const "Chain 2: ";          // scope 0 at chains-example\src\main.rs:58:14: 58:27
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 32, 50, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, size: Size { raw: 9 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:58:14: 58:27
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 32, 50, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, size: Size { raw: 9 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
        _2 = _3;                         // scope 0 at chains-example\src\main.rs:58:14: 58:27
        _5 = const "\n";                 // scope 0 at chains-example\src\main.rs:58:14: 58:27
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:58:14: 58:27
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _4 = _5;                         // scope 0 at chains-example\src\main.rs:58:14: 58:27
        _1 = [move _2, move _4];         // scope 0 at chains-example\src\main.rs:58:14: 58:27
        _0 = &_1;                        // scope 0 at chains-example\src\main.rs:58:14: 58:27
        return;                          // scope 0 at chains-example\src\main.rs:58:14: 58:27
    }
}

promoted[7] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at chains-example\src\main.rs:57:14: 57:27
    let mut _1: [&str; 2];               // in scope 0 at chains-example\src\main.rs:57:14: 57:27
    let mut _2: &str;                    // in scope 0 at chains-example\src\main.rs:57:14: 57:27
    let mut _3: &str;                    // in scope 0 at chains-example\src\main.rs:57:14: 57:27
    let mut _4: &str;                    // in scope 0 at chains-example\src\main.rs:57:14: 57:27
    let mut _5: &str;                    // in scope 0 at chains-example\src\main.rs:57:14: 57:27
    scope 1 {
        scope 2 {
            scope 3 {
            }
            scope 4 {
                scope 5 {
                }
            }
        }
    }
    scope 6 {
    }
    scope 7 {
    }
    scope 8 {
        scope 9 {
        }
        scope 10 {
        }
        scope 11 {
        }
        scope 12 {
        }
    }

    bb0: {
        _3 = const "Chain 1: ";          // scope 0 at chains-example\src\main.rs:57:14: 57:27
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 32, 49, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, size: Size { raw: 9 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:57:14: 57:27
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 32, 49, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [511], len: Size { raw: 9 } }, size: Size { raw: 9 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 9 }) }
        _2 = _3;                         // scope 0 at chains-example\src\main.rs:57:14: 57:27
        _5 = const "\n";                 // scope 0 at chains-example\src\main.rs:57:14: 57:27
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:57:14: 57:27
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _4 = _5;                         // scope 0 at chains-example\src\main.rs:57:14: 57:27
        _1 = [move _2, move _4];         // scope 0 at chains-example\src\main.rs:57:14: 57:27
        _0 = &_1;                        // scope 0 at chains-example\src\main.rs:57:14: 57:27
        return;                          // scope 0 at chains-example\src\main.rs:57:14: 57:27
    }
}

promoted[8] in main: &[std::fmt::ArgumentV1; 0] = {
    let mut _0: &[std::fmt::ArgumentV1; 0]; // return place in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _1: [std::fmt::ArgumentV1; 0]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    scope 1 {
        scope 2 {
            scope 3 {
            }
            scope 4 {
                scope 5 {
                }
            }
        }
    }
    scope 6 {
    }
    scope 7 {
    }
    scope 8 {
        scope 9 {
        }
        scope 10 {
        }
        scope 11 {
        }
        scope 12 {
        }
    }

    bb0: {
        _1 = [];                         // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _0 = &_1;                        // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        return;                          // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    }
}

promoted[9] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at chains-example\src\main.rs:56:14: 56:19
    let mut _1: [&str; 1];               // in scope 0 at chains-example\src\main.rs:56:14: 56:19
    let mut _2: &str;                    // in scope 0 at chains-example\src\main.rs:56:14: 56:19
    let mut _3: &str;                    // in scope 0 at chains-example\src\main.rs:56:14: 56:19
    scope 1 {
        scope 2 {
            scope 3 {
            }
            scope 4 {
                scope 5 {
                }
            }
        }
    }
    scope 6 {
    }
    scope 7 {
    }
    scope 8 {
        scope 9 {
        }
        scope 10 {
        }
        scope 11 {
        }
        scope 12 {
        }
    }

    bb0: {
        _3 = const "---\n";              // scope 0 at chains-example\src\main.rs:56:14: 56:19
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [45, 45, 45, 10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, size: Size { raw: 4 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:56:14: 56:19
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [45, 45, 45, 10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, size: Size { raw: 4 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
        _2 = _3;                         // scope 0 at chains-example\src\main.rs:56:14: 56:19
        _1 = [move _2];                  // scope 0 at chains-example\src\main.rs:56:14: 56:19
        _0 = &_1;                        // scope 0 at chains-example\src\main.rs:56:14: 56:19
        return;                          // scope 0 at chains-example\src\main.rs:56:14: 56:19
    }
}

promoted[10] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at chains-example\src\main.rs:53:18: 53:38
    let mut _1: [&str; 3];               // in scope 0 at chains-example\src\main.rs:53:18: 53:38
    let mut _2: &str;                    // in scope 0 at chains-example\src\main.rs:53:18: 53:38
    let mut _3: &str;                    // in scope 0 at chains-example\src\main.rs:53:18: 53:38
    let mut _4: &str;                    // in scope 0 at chains-example\src\main.rs:53:18: 53:38
    let mut _5: &str;                    // in scope 0 at chains-example\src\main.rs:53:18: 53:38
    let mut _6: &str;                    // in scope 0 at chains-example\src\main.rs:53:18: 53:38
    let mut _7: &str;                    // in scope 0 at chains-example\src\main.rs:53:18: 53:38
    scope 1 {
        scope 2 {
            scope 3 {
            }
            scope 4 {
                scope 5 {
                }
            }
        }
    }
    scope 6 {
    }
    scope 7 {
    }
    scope 8 {
        scope 9 {
        }
        scope 10 {
        }
        scope 11 {
        }
        scope 12 {
        }
    }

    bb0: {
        _3 = const "Chain 0 for ";       // scope 0 at chains-example\src\main.rs:53:18: 53:38
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 32, 48, 32, 102, 111, 114, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, size: Size { raw: 12 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:53:18: 53:38
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 32, 48, 32, 102, 111, 114, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [4095], len: Size { raw: 12 } }, size: Size { raw: 12 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 12 }) }
        _2 = _3;                         // scope 0 at chains-example\src\main.rs:53:18: 53:38
        _5 = const ": ";                 // scope 0 at chains-example\src\main.rs:53:18: 53:38
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:53:18: 53:38
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }
        _4 = _5;                         // scope 0 at chains-example\src\main.rs:53:18: 53:38
        _7 = const "\n";                 // scope 0 at chains-example\src\main.rs:53:18: 53:38
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:53:18: 53:38
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _6 = _7;                         // scope 0 at chains-example\src\main.rs:53:18: 53:38
        _1 = [move _2, move _4, move _6]; // scope 0 at chains-example\src\main.rs:53:18: 53:38
        _0 = &_1;                        // scope 0 at chains-example\src\main.rs:53:18: 53:38
        return;                          // scope 0 at chains-example\src\main.rs:53:18: 53:38
    }
}

promoted[11] in main: &[std::fmt::ArgumentV1; 0] = {
    let mut _0: &[std::fmt::ArgumentV1; 0]; // return place in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    let mut _1: [std::fmt::ArgumentV1; 0]; // in scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    scope 1 {
        scope 2 {
            scope 3 {
            }
            scope 4 {
                scope 5 {
                }
            }
        }
    }
    scope 6 {
    }
    scope 7 {
    }
    scope 8 {
        scope 9 {
        }
        scope 10 {
        }
        scope 11 {
        }
        scope 12 {
        }
    }

    bb0: {
        _1 = [];                         // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        _0 = &_1;                        // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
        return;                          // scope 0 at D:\Development\Rust\rustc\src\libstd\macros.rs:97:28: 97:61
    }
}

promoted[12] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at chains-example\src\main.rs:50:14: 50:44
    let mut _1: [&str; 1];               // in scope 0 at chains-example\src\main.rs:50:14: 50:44
    let mut _2: &str;                    // in scope 0 at chains-example\src\main.rs:50:14: 50:44
    let mut _3: &str;                    // in scope 0 at chains-example\src\main.rs:50:14: 50:44
    scope 1 {
        scope 2 {
            scope 3 {
            }
            scope 4 {
                scope 5 {
                }
            }
        }
    }
    scope 6 {
    }
    scope 7 {
    }
    scope 8 {
        scope 9 {
        }
        scope 10 {
        }
        scope 11 {
        }
        scope 12 {
        }
    }

    bb0: {
        _3 = const "Hello chains of recurrences!\n"; // scope 0 at chains-example\src\main.rs:50:14: 50:44
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [72, 101, 108, 108, 111, 32, 99, 104, 97, 105, 110, 115, 32, 111, 102, 32, 114, 101, 99, 117, 114, 114, 101, 110, 99, 101, 115, 33, 10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, size: Size { raw: 29 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 })
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:50:14: 50:44
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [72, 101, 108, 108, 111, 32, 99, 104, 97, 105, 110, 115, 32, 111, 102, 32, 114, 101, 99, 117, 114, 114, 101, 110, 99, 101, 115, 33, 10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [536870911], len: Size { raw: 29 } }, size: Size { raw: 29 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 29 }) }
        _2 = _3;                         // scope 0 at chains-example\src\main.rs:50:14: 50:44
        _1 = [move _2];                  // scope 0 at chains-example\src\main.rs:50:14: 50:44
        _0 = &_1;                        // scope 0 at chains-example\src\main.rs:50:14: 50:44
        return;                          // scope 0 at chains-example\src\main.rs:50:14: 50:44
    }
}

fn chain_function_2(_1: usize, _2: std::option::Option<()>, _3: usize) -> usize {
    debug _param => _1;                  // in scope 0 at chains-example\src\main.rs:23:21: 23:27
    debug _separate_param => _2;         // in scope 0 at chains-example\src\main.rs:23:36: 23:51
    debug _param2 => _3;                 // in scope 0 at chains-example\src\main.rs:23:65: 23:72
    let mut _0: usize;                   // return place in scope 0 at chains-example\src\main.rs:23:84: 23:89
    let _4: &str;                        // in scope 0 at D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:13: 20:26
    let mut _5: usize;                   // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _6: usize;                   // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _7: usize;                   // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _8: usize;                   // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _9: usize;                   // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _10: usize;                  // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _11: usize;                  // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _12: usize;                  // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _13: usize;                  // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _14: usize;                  // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _15: usize;                  // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _16: usize;                  // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _17: usize;                  // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _18: usize;                  // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _19: usize;                  // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _20: usize;                  // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _21: usize;                  // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    let mut _22: usize;                  // in scope 0 at chains-example\src\main.rs:23:1: 26:2
    scope 1 {
        debug _metadata_str => _4;       // in scope 1 at D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:13: 20:26
    }

    bb0: {
        StorageLive(_4);                 // scope 0 at D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:13: 20:26
        _4 = const "ChainsOfRecurrences { 1, +, x2, +, 3 }"; // scope 0 at D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:29: 20:96
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 115, 79, 102, 82, 101, 99, 117, 114, 114, 101, 110, 99, 101, 115, 32, 123, 32, 49, 44, 32, 43, 44, 32, 120, 50, 44, 32, 43, 44, 32, 51, 32, 125], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [274877906943], len: Size { raw: 38 } }, size: Size { raw: 38 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 38 })
                                         // mir::Constant
                                         // + span: D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:29: 20:96
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 115, 79, 102, 82, 101, 99, 117, 114, 114, 101, 110, 99, 101, 115, 32, 123, 32, 49, 44, 32, 43, 44, 32, 120, 50, 44, 32, 43, 44, 32, 51, 32, 125], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [274877906943], len: Size { raw: 38 } }, size: Size { raw: 38 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 38 }) }
        StorageDead(_4);                 // scope 0 at chains-example\src\main.rs:26:1: 26:2
        StorageLive(_7);                 // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageLive(_5);                 // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageLive(_6);                 // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _5 = _1;                         // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _6 = const 1_usize;              // scope 0 at chains-example\src\main.rs:23:1: 26:2
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:23:1: 26:2
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }
        _7 = const 1_usize;              // scope 0 at chains-example\src\main.rs:23:1: 26:2
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:23:1: 26:2
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }
        StorageLive(_8);                 // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageLive(_9);                 // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _8 = _5;                         // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _9 = Mul(_6, move _8);           // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageDead(_8);                 // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageLive(_10);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _10 = _3;                        // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageLive(_11);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageLive(_12);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _11 = _9;                        // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _12 = Mul(_10, move _11);        // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageDead(_11);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageLive(_13);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageLive(_14);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _13 = _12;                       // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _14 = Add(_7, move _13);         // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageDead(_13);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageLive(_15);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _15 = Sub(move _5, const 1_usize); // scope 0 at chains-example\src\main.rs:23:1: 26:2
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:23:1: 26:2
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }
        StorageDead(_12);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageDead(_10);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageDead(_6);                 // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageDead(_5);                 // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageDead(_7);                 // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageLive(_16);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageLive(_17);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _16 = _15;                       // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _17 = Mul(_9, move _16);         // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageDead(_16);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageLive(_18);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _18 = Div(move _17, const 2_usize); // scope 0 at chains-example\src\main.rs:23:1: 26:2
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000002))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:23:1: 26:2
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }
        StorageDead(_17);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageLive(_19);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _19 = const 3_usize;             // scope 0 at chains-example\src\main.rs:23:1: 26:2
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000003))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:23:1: 26:2
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }
        StorageLive(_20);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageLive(_21);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _20 = _18;                       // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _21 = Mul(_19, move _20);        // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageDead(_20);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageLive(_22);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _22 = _21;                       // scope 0 at chains-example\src\main.rs:23:1: 26:2
        _0 = Add(_14, move _22);         // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageDead(_22);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageDead(_21);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageDead(_19);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageDead(_9);                 // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageDead(_15);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageDead(_14);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        StorageDead(_18);                // scope 0 at chains-example\src\main.rs:23:1: 26:2
        return;                          // scope 0 at chains-example\src\main.rs:23:1: 26:2
    }
}

fn <impl at chains-example\src\main.rs:32:1: 47:2>::chain_function_4(_1: &mut Chain3, _2: usize, _3: usize) -> usize {
    debug self => _1;                    // in scope 0 at chains-example\src\main.rs:42:29: 42:38
    debug _param => _2;                  // in scope 0 at chains-example\src\main.rs:42:40: 42:46
    debug _param2 => _3;                 // in scope 0 at chains-example\src\main.rs:42:55: 42:62
    let mut _0: usize;                   // return place in scope 0 at chains-example\src\main.rs:42:74: 42:79
    let _4: &str;                        // in scope 0 at D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:13: 20:26
    let mut _5: (isize, bool);           // in scope 0 at chains-example\src\main.rs:44:9: 44:25
    let mut _6: usize;                   // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _7: usize;                   // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _8: usize;                   // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _9: usize;                   // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _10: usize;                  // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _11: usize;                  // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _12: usize;                  // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _13: usize;                  // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _14: usize;                  // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _15: usize;                  // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _16: usize;                  // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _17: usize;                  // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _18: usize;                  // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _19: usize;                  // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _20: usize;                  // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _21: usize;                  // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _22: usize;                  // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    let mut _23: usize;                  // in scope 0 at chains-example\src\main.rs:42:5: 46:6
    scope 1 {
        debug _metadata_str => _4;       // in scope 1 at D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:13: 20:26
    }

    bb0: {
        StorageLive(_4);                 // scope 0 at D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:13: 20:26
        _4 = const "ChainsOfRecurrences { 1, +, x2, +, 3 }"; // scope 0 at D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:29: 20:96
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 115, 79, 102, 82, 101, 99, 117, 114, 114, 101, 110, 99, 101, 115, 32, 123, 32, 49, 44, 32, 43, 44, 32, 120, 50, 44, 32, 43, 44, 32, 51, 32, 125], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [274877906943], len: Size { raw: 38 } }, size: Size { raw: 38 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 38 })
                                         // mir::Constant
                                         // + span: D:\Development\Rust\chains-of-recurrencies\chains-macros\src\lib.rs:20:29: 20:96
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67, 104, 97, 105, 110, 115, 79, 102, 82, 101, 99, 117, 114, 114, 101, 110, 99, 101, 115, 32, 123, 32, 49, 44, 32, 43, 44, 32, 120, 50, 44, 32, 43, 44, 32, 51, 32, 125], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [274877906943], len: Size { raw: 38 } }, size: Size { raw: 38 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 38 }) }
        _5 = CheckedAdd(((*_1).0: isize), const 1_isize); // scope 1 at chains-example\src\main.rs:44:9: 44:25
                                         // ty::Const
                                         // + ty: isize
                                         // + val: Value(Scalar(0x0000000000000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:44:24: 44:25
                                         // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }
        assert(!move (_5.1: bool), "attempt to compute `{} + {}` which would overflow", ((*_1).0: isize), const 1_isize) -> bb1; // scope 1 at chains-example\src\main.rs:44:9: 44:25
                                         // ty::Const
                                         // + ty: isize
                                         // + val: Value(Scalar(0x0000000000000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:44:24: 44:25
                                         // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }
    }

    bb1: {
        ((*_1).0: isize) = move (_5.0: isize); // scope 1 at chains-example\src\main.rs:44:9: 44:25
        _0 = const 0_usize;              // scope 1 at chains-example\src\main.rs:45:9: 45:10
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000000))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:45:9: 45:10
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }
        StorageDead(_4);                 // scope 0 at chains-example\src\main.rs:46:5: 46:6
        StorageLive(_8);                 // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageLive(_6);                 // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageLive(_7);                 // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _6 = _2;                         // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _7 = const 1_usize;              // scope 0 at chains-example\src\main.rs:42:5: 46:6
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:42:5: 46:6
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }
        _8 = const 1_usize;              // scope 0 at chains-example\src\main.rs:42:5: 46:6
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:42:5: 46:6
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }
        StorageLive(_9);                 // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageLive(_10);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _9 = _6;                         // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _10 = Mul(_7, move _9);          // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageDead(_9);                 // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageLive(_11);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _11 = _3;                        // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageLive(_12);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageLive(_13);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _12 = _10;                       // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _13 = Mul(_11, move _12);        // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageDead(_12);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageLive(_14);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageLive(_15);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _14 = _13;                       // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _15 = Add(_8, move _14);         // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageDead(_14);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageLive(_16);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _16 = Sub(move _6, const 1_usize); // scope 0 at chains-example\src\main.rs:42:5: 46:6
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000001))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:42:5: 46:6
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }
        StorageDead(_13);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageDead(_11);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageDead(_7);                 // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageDead(_6);                 // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageDead(_8);                 // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageLive(_17);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageLive(_18);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _17 = _16;                       // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _18 = Mul(_10, move _17);        // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageDead(_17);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageLive(_19);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _19 = Div(move _18, const 2_usize); // scope 0 at chains-example\src\main.rs:42:5: 46:6
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000002))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:42:5: 46:6
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }
        StorageDead(_18);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageLive(_20);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _20 = const 3_usize;             // scope 0 at chains-example\src\main.rs:42:5: 46:6
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Value(Scalar(0x0000000000000003))
                                         // mir::Constant
                                         // + span: chains-example\src\main.rs:42:5: 46:6
                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }
        StorageLive(_21);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageLive(_22);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _21 = _19;                       // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _22 = Mul(_20, move _21);        // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageDead(_21);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageLive(_23);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _23 = _22;                       // scope 0 at chains-example\src\main.rs:42:5: 46:6
        _0 = Add(_15, move _23);         // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageDead(_23);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageDead(_22);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageDead(_20);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageDead(_10);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageDead(_16);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageDead(_15);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        StorageDead(_19);                // scope 0 at chains-example\src\main.rs:42:5: 46:6
        return;                          // scope 0 at chains-example\src\main.rs:42:5: 46:6
    }
}
